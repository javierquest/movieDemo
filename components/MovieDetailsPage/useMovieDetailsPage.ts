/**********************************************************************
 *
 *   Component hook generated by Quest
 *
 *   Code Logic for the component goes in this hook
 *   To setup bindings that use the data here or call the functions here, use the Quest editor
 *
 *   For help and further details refer to: https://www.quest.ai/docs
 *
 *
 **********************************************************************/

 import React, { useEffect, useState } from 'react';
 import useResponsiveSize from 'hooks/useResponsiveSize';
 import { MODBMovieType, MODBMovieVideoType, MODBMoviewImageType } from 'utils/types';
 import { transformData } from 'utils';
 
 const MOVIE_API_BASE_PATH = 'https://api.themoviedb.org/3';
 const MOVIE_API_KEY= '3017a8aa683782d5492b916133b6b6d7';
 const MOVIE_PATH = '/movie/';
 const MOVIE_VIDEO_PATH='/videos';
 const MOVIE_IMAGE_PATH='/images'
 const MOVIE_ID='436270';
 
 const MOVIE_SECOND_SOURCE_API_BASE_PATH = 'https://www.omdbapi.com/?apikey=6a3e6ce';
 
 const useMovieDetailsPage = (moviePath = MOVIE_ID) => {
   const [isLoading, setIsLoading] = useState<boolean>(true);
   const [movie, setMovie] = useState<any>({});
 
   useEffect(() => {
     if (isLoading) {
       (async() => {
         const moviesEndpoints = [
           `${MOVIE_API_BASE_PATH}${MOVIE_PATH}${moviePath}?api_key=${MOVIE_API_KEY}&lanaguage=en-US`,
           `${MOVIE_API_BASE_PATH}${MOVIE_PATH}${moviePath}${MOVIE_VIDEO_PATH}?api_key=${MOVIE_API_KEY}&lanaguage=en-US`,
           `${MOVIE_API_BASE_PATH}${MOVIE_PATH}${moviePath}${MOVIE_IMAGE_PATH}?api_key=${MOVIE_API_KEY}`
         ];
         const [movie, movieTrailers, images] = await Promise.all(moviesEndpoints.map(
           async (url) => {
             const response = await fetch(url);
             return response.json();
           }
         ));
         const secondMovie = await (await fetch(`${MOVIE_SECOND_SOURCE_API_BASE_PATH}&i=${movie.imdb_id}&plot=full`)).json();
 
         const movieDataConsolidated = transformData(movie, movieTrailers, images, secondMovie);
         setMovie(movieDataConsolidated);
         setIsLoading(false);
       })();
     }
   }, [isLoading]);
   const size = useResponsiveSize();
 
   let data: any = { size, isLoading, movie };
 
   let fns: any = {};
   return { data, fns };
 };
 
 export default useMovieDetailsPage;
 